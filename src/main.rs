fn main() {
    println!("Hello, world!");
}

#[cfg(test)]
mod test {
    use holochain_types::prelude::ExternIO;
    use serde_json::Value;

    #[test]
    /// Try to ExternIO::decode() a result of a zome call to HHA's
    /// [hha/create_draft]() [TODO: add link to the right version of a code!!!]
    fn decode_zome_call_1() {
        let zome_call_response: ExternIO = vec![222, 0, 20, 162, 105, 100, 217, 53, 117, 104, 67, 107, 107, 73, 95, 85, 107, 118, 89, 103, 85, 65, 67, 110, 110, 102, 106, 57, 99, 73, 68, 57, 75, 72, 95, 106, 77, 85, 45, 104, 76, 120, 76, 112, 87, 51, 122, 99, 113, 108, 84, 52, 65, 103, 85, 103, 72, 51, 106, 90, 74, 175, 112, 114, 111, 118, 105, 100, 101, 114, 95, 112, 117, 98, 107, 101, 121, 217, 53, 117, 104, 67, 65, 107, 55, 54, 105, 107, 113, 112, 103, 120, 100, 105, 115, 99, 53, 98, 82, 74, 99, 67, 89, 45, 108, 79, 84, 86, 66, 56, 111, 115, 72, 69, 107, 105, 71, 106, 56, 104, 80, 52, 107, 120, 65, 48, 49, 106, 83, 114, 106, 67, 168, 105, 115, 95, 100, 114, 97, 102, 116, 195, 169, 105, 115, 95, 112, 97, 117, 115, 101, 100, 194, 163, 117, 105, 100, 192, 170, 98, 117, 110, 100, 108, 101, 95, 117, 114, 108, 166, 85, 114, 108, 49, 50, 51, 170, 117, 105, 95, 115, 114, 99, 95, 117, 114, 108, 192, 164, 100, 110, 97, 115, 144, 171, 104, 111, 115, 116, 101, 100, 95, 117, 114, 108, 115, 144, 164, 110, 97, 109, 101, 167, 84, 101, 115, 116, 49, 50, 51, 168, 108, 111, 103, 111, 95, 117, 114, 108, 192, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 160, 170, 99, 97, 116, 101, 103, 111, 114, 105, 101, 115, 144, 173, 106, 117, 114, 105, 115, 100, 105, 99, 116, 105, 111, 110, 115, 144, 181, 101, 120, 99, 108, 117, 100, 101, 95, 106, 117, 114, 105, 115, 100, 105, 99, 116, 105, 111, 110, 115, 194, 182, 112, 117, 98, 108, 105, 115, 104, 101, 114, 95, 112, 114, 105, 99, 105, 110, 103, 95, 112, 114, 101, 102, 131, 163, 99, 112, 117, 161, 48, 167, 115, 116, 111, 114, 97, 103, 101, 161, 48, 169, 98, 97, 110, 100, 119, 105, 100, 116, 104, 161, 48, 172, 108, 111, 103, 105, 110, 95, 99, 111, 110, 102, 105, 103, 130, 182, 100, 105, 115, 112, 108, 97, 121, 95, 112, 117, 98, 108, 105, 115, 104, 101, 114, 95, 110, 97, 109, 101, 194, 181, 114, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110, 95, 105, 110, 102, 111, 95, 117, 114, 108, 192, 184, 115, 112, 101, 99, 105, 97, 108, 95, 105, 110, 115, 116, 97, 108, 108, 101, 100, 95, 97, 112, 112, 95, 105, 100, 192, 173, 104, 111, 115, 116, 95, 115, 101, 116, 116, 105, 110, 103, 115, 129, 170, 105, 115, 95, 101, 110, 97, 98, 108, 101, 100, 194, 171, 108, 97, 115, 116, 95, 101, 100, 105, 116, 101, 100, 207, 0, 6, 14, 128, 253, 63, 133, 19].into();

        let response: Value = ExternIO::decode(&zome_call_response).unwrap();

        println!("{}", response);
    }

    #[test]
    /// Try to ExternIO::decode() a result of a zome call to holofuel's
    /// [profile/get_my_profile]() [TODO: add link to the right version of a code!!!]
    fn decode_zome_call_2() {
        let zome_call_response: ExternIO = vec![132, 173, 97, 103, 101, 110, 116, 95, 97, 100, 100, 114, 101, 115, 115, 196, 39, 132, 32, 36, 239, 168, 164, 170, 152, 49, 118, 43, 28, 229, 180, 73, 112, 38, 62, 148, 228, 213, 7, 202, 44, 28, 73, 34, 26, 63, 33, 63, 137, 49, 3, 77, 99, 74, 184, 194, 168, 110, 105, 99, 107, 110, 97, 109, 101, 192, 170, 97, 118, 97, 116, 97, 114, 95, 117, 114, 108, 192, 170, 117, 110, 105, 113, 117, 101, 110, 101, 115, 115, 196, 39, 132, 33, 36, 239, 168, 164, 170, 152, 49, 118, 43, 28, 229, 180, 73, 112, 38, 62, 148, 228, 213, 7, 202, 44, 28, 73, 34, 26, 63, 33, 63, 137, 49, 3, 77, 99, 74, 184, 194].into();

        let response: Value = ExternIO::decode(&zome_call_response).unwrap();

        println!("{}", response);
    }
}